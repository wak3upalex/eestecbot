from aiogram import Bot, Dispatcher, types
from dotenv import load_dotenv
from aiogram import types
from aiogram.filters import Command
import os
import json
from datetime import datetime

import logging
log_file_path = 'bot/logs/logs_bot.log'  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª –Ω–∞ —É—Ä–æ–≤–Ω–µ WARNING –∏ –≤—ã—à–µ
file_handler = logging.FileHandler(log_file_path)
file_handler.setLevel(logging.WARNING)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ —É—Ä–æ–≤–Ω–µ INFO –∏ –≤—ã—à–µ
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s : %(levelname)s : %(name)s : %(message)s')
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
logging.basicConfig(level=logging.DEBUG, handlers=[file_handler, console_handler])

# Load environment variables from .env file
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

from reg import *
from inLineButtons_quest import *
from buttons import *
@dp.message(Command(commands=["start"]))
async def start_command_handler(message: types.Message):
    # Ensure the 'users' directory exists
    if not os.path.exists('users'):
        os.makedirs('users')

    current_time = datetime.now().isoformat()

    # Check if user file exists
    user_file_path = f'users/{message.from_user.username}.json'
    if os.path.exists(user_file_path):
        # Load existing user data
        with open(user_file_path, 'r') as infile:
            user_data = json.load(infile)
    else:
        # Create new user data
        user_data = {
            "id": message.from_user.id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code,
            "last_interaction_time": current_time,
            "quest_result": None  # Initialize quest_result field
        }

    # Update last interaction time
    user_data["last_interaction_time"] = current_time

    # Save updated user data back to JSON
    with open(user_file_path, 'w') as outfile:
        json.dump(user_data, outfile)

    logging.info('Start command received from user: %s', message.from_user.username)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ EESTEC LC St. Petersburg! \n–ù–∞–∂–∏–º–∞–π –∫–æ–º–∞–Ω–¥—É /quest –∏ —É–∑–Ω–∞–≤–∞–π, –∫–∞–∫–æ–π –æ—Ç–¥–µ–ª —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!ü•∞')

if __name__ == '__main__':
    dp.run_polling(bot)
